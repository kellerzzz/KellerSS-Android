<?   goto uzGgL; Qk1Ip: $verde = "\33[92m"; goto D7P4i; cf51G: $preto = "\33[30m\x1b[1m"; goto qmcSy; TctvA: $cinza = "\x1b[37m"; goto xbUQ9; uxro3: $magenta = "\x1b[35m"; goto ABt6A; x0ffj: $laranja = "\x1b[38;5;208m"; goto echtV; ORqEq: $opcaoscanner = trim(fgets(STDIN, 1024)); goto gVM4H; AIWmq: $bold = "\x1b[1m"; goto Prubz; kL0b0: menuscanner: goto tAzlt; NBtMY: escolheropcoes: goto dZZ2f; rz5nS: $amarelobg = "\x1b[43m"; goto yLtnj; dC0gz: $verdebg = "\x1b[42m"; goto iWL2l; D7P4i: $fverde = "\33[32m"; goto JTYub; xbUQ9: $ciano = "\33[36m"; goto AIWmq; EklbU: echo "\xa"; goto kL0b0; echtV: $azul = "\33[34m"; goto blbX2; UMm4B: echo $cln; goto nYhEq; NGpJi: $vermelhobg = "\33[101m"; goto TctvA; r7xdw: sleep(5); goto EklbU; uzGgL: $branco = "\33[97m"; goto cf51G; nYhEq: function atualizar() { global $cln, $bold, $fverde; echo "  
\33[91m\x1b[1m[+] KellerSS Updater [+]  
Atualizando, por favor aguarde...\xa\xa{$cln}"; system("git fetch origin && git reset --hard origin/master && git clean -f -d"); echo $bold . $fverde . "[i] Atualiza\303\xa7\xc3\243o concluida! Por favor reinicie o Scanner \xa" . $cln; die; } goto pB4kZ; qmcSy: $amarelo = "\33[93m"; goto x0ffj; Yh_Nr: $cln = "\33[0m"; goto Qk1Ip; gVM4H: if (!in_array($opcaoscanner, array("0", "1", "2", "S"), true)) { echo $bold . $vermelho . "  
[!] Op\303\xa7\xc3\243o inv\303\241lida! Tente novamente.   
  
" . $cln; goto escolheropcoes; } else { if ($opcaoscanner == "0") { } elseif ($opcaoscanner == "1") { system("clear"); keller_banner(); if (!shell_exec("adb version > /dev/null 2>&1")) { system("pkg install -y android-tools > /dev/null 2>&1"); } date_default_timezone_set("America/Sao_Paulo"); shell_exec("adb start-server > /dev/null 2>&1"); $comandoDispositivos = shell_exec("adb devices 2>&1"); if (empty($comandoDispositivos) || strpos($comandoDispositivos, "device") === false || strpos($comandoDispositivos, "no devices") !== false) { echo "\x1b[1;31m[!] Nenhum dispositivo encontrado. Fa\303\247a o pareamento de IP ou conecte um dispositivo via USB.\xa\xa"; die; } $comandoVerificarFF = shell_exec("adb shell pm list packages | grep com.dts.freefireth 2>&1"); if (strpos($comandoVerificarFF, "more than one device/emulator") !== false) { echo $bold . $vermelho . "[!] Pareamento realizado de maneira incorreta, digite "adb disconnect" e refa\xc3\xa7a o processo.\xa  
"; die; } if (!empty($comandoVerificarFF) && strpos($comandoVerificarFF, "com.dts.freefireth") !== false) { } else { echo $bold . $vermelho . "[!] O FreeFire est\xc3\241 desinstalado, cancelando a telagem...\xa\xa"; die; } $comandoVersaoAndroid = "adb shell getprop ro.build.version.release"; $resultadoVersaoAndroid = shell_exec($comandoVersaoAndroid); if (!empty($resultadoVersaoAndroid)) { echo $bold . $azul . "[+] Vers\xc3\xa3o do Android: " . trim($resultadoVersaoAndroid) . "\xa"; } else { echo $bold . $vermelho . "[!] N\303\243o foi poss\xc3\xadvel obter a vers\xc3\xa3o do Android.  
"; } $comandoRoot = "adb shell "which su""; $resultadoRoot = shell_exec($comandoRoot); if (!empty($resultadoRoot)) { echo "[+] O dispositivo tem root.\xa\xa"; } else { echo "[-] O dispositivo n\303\xa3o tem root.  
\xa"; } echo $bold . $azul . "[+] Checando se o dispositivo foi reiniciado recentemente...  
"; $comandoUPTIME = shell_exec("adb shell uptime"); if (preg_match("/up (\d+) min/", $comandoUPTIME, $filtros)) { $minutos = $filtros[1]; echo $bold . $vermelho . "[!] O dispositivo foi iniciado recentemente (h\303\241 {$minutos} minutos).\xa  
"; } else { echo $bold . $fverde . "[i] Dispositivo n\303\243o reiniciado recentemente.  
\xa"; } $logcatTime = shell_exec("adb logcat -d -v time | head -n 2"); preg_match("/(\d{2}-\d{2} \d{2}:\d{2}:\d{2})/", $logcatTime, $matchTime); if (!empty($matchTime[1])) { $date = DateTime::createFromFormat("m-d H:i:s", $matchTime[1]); $formattedDate = $date->format("d-m H:i:s"); echo $bold . $amarelo . "[+] Primeira log do sistema: " . $formattedDate . "  
"; echo $bold . $branco . "[+] Caso a data da primeira log seja durante/ap\303\263s a partida e/ou seja igual a uma data alterada, aplique o W.O!  
\xa"; } else { echo $bold . $vermelho . "[!] N\303\243o foi poss\xc3\255vel capturar a data/hora do sistema.  
\xa"; } echo $bold . $azul . "[+] Verificando mudan\xc3\247as de data/hora...  
"; $logcatOutput = shell_exec("adb logcat -d | grep "UsageStatsService: Time changed" | grep -v "HCALL""); if ($logcatOutput !== null && trim($logcatOutput) !== '') { $logLines = explode("\xa", trim($logcatOutput)); } else { echo $bold . $vermelho . "[!] Erro ao obter logs de modifica\xc3\247\xc3\243o de data/hora, verifique a data da primeira log do sistema.\xa  
"; } $fusoHorario = trim(shell_exec("adb shell getprop persist.sys.timezone")); if ($fusoHorario !== "America/Sao_Paulo") { echo $bold . $amarelo . "[!] Aviso: O fuso hor\303\xa1rio do dispositivo \303\xa9 '{$fusoHorario}', diferente de 'America/Sao_Paulo', possivel tentativa de Bypass.  
  
"; } $dataAtual = date("m-d"); $logsAlterados = array(); if (!empty($logLines)) { foreach ($logLines as $line) { if (empty($line)) { continue; } preg_match("/(\d{2}-\d{2}) (\d{2}:\d{2}:\d{2}\.\d{3}).*Time changed in.*by (-?\d+) second/", $line, $matches); if (!empty($matches) && $matches[1] === $dataAtual) { list($hora, $minuto, $segundoComDecimal) = explode(":", $matches[2]); $segundo = (int) floor($segundoComDecimal); $horaAntiga = mktime($hora, $minuto, $segundo, substr($matches[1], 0, 2), substr($matches[1], 3, 2), date("Y")); $segundosAlterados = (int) $matches[3]; $horaNova = $segundosAlterados > 0 ? $horaAntiga - $segundosAlterados : $horaAntiga + abs($segundosAlterados); $dataAntiga = date("d-m H:i", $horaAntiga); $horaAntigaFormatada = date("H:i", $horaAntiga); $horaNovaFormatada = date("H:i", $horaNova); $dataNova = date("d-m", $horaNova); $logsAlterados[] = array("horaAntiga" => $horaAntiga, "horaNova" => $horaNova, "horaAntigaFormatada" => $horaAntigaFormatada, "horaNovaFormatada" => $horaNovaFormatada, "acao" => $segundosAlterados > 0 ? "Atrasou" : "Adiantou", "dataAntiga" => $dataAntiga, "dataNova" => $dataNova); } } } if (!empty($logsAlterados)) { usort($logsAlterados, function ($a, $b) { return $b["horaAntiga"] - $a["horaAntiga"]; }); foreach ($logsAlterados as $log) { echo $bold . $amarelo . "[!] Alterou hor\xc3\xa1rio de {$log["dataAntiga"]} para {$log["dataNova"]} {$log["horaNovaFormatada"]} ({$log["acao"]} hor\xc3\xa1rio)  
"; } } else { echo $bold . $vermelho . "[!] Nenhum log de altera\303\247\303\243o de hor\xc3\xa1rio encontrado.\xa\xa"; } echo $bold . $azul . "\xa[+] Checando se modificou data e hora...\xa"; $autoTime = trim(shell_exec("adb shell settings get global auto_time")); $autoTimeZone = trim(shell_exec("adb shell settings get global auto_time_zone")); if ($autoTime !== "1" || $autoTimeZone !== "1") { echo $bold . $vermelho . "[!] Poss\303\xadvel bypass detectado: data e hora/furo hor\303\241rio autom\303\xa1tico desativado.\xa"; } else { echo $bold . $fverde . "[i] Data e hora/fuso hor\303\xa1rio autom\xc3\xa1tico est\xc3\xa3o ativados.  
"; } echo $bold . $branco . "[+] Caso haja mudan\303\247a de hor\303\241rio durante/ap\303\xb3s a partida, aplique o W.O!\xa  
"; echo $bold . $azul . "[+] Obtendo os \303\272ltimos acessos do Google Play Store...\xa"; $comandoUSAGE = shell_exec("adb shell dumpsys usagestats 2>/dev/null | grep -i 'MOVE_TO_FOREGROUND' 2>/dev/null | grep 'package=com.android.vending' 2>/dev/null | awk -F'time="' '{print $2}' 2>/dev/null | awk '{gsub(/"/, ""); print $1, $2}' 2>/dev/null | tail -n 5 2>/dev/null"); if (!is_null($comandoUSAGE) && trim($comandoUSAGE) !== '') { echo $bold . $fverde . "[i] \xc3\x9altimos 5 acessos:  
"; echo $amarelo . $comandoUSAGE . "  
"; } else { echo $bold . "\33[31m[!] Nenhum dado encontrado.  
"; } echo $bold . $branco . "[+] Caso haja acesso durante/ap\xc3\263s a partida, aplique o W.O!\xa  
"; echo $bold . $azul . "[+] Obtendo os \303\272ltimos textos copiados...  
"; $comando = "adb logcat -d 2>/dev/null | grep 'hcallSetClipboardTextRpc' 2>/dev/null | sed -E 's/^([0-9]{2}-[0-9]{2}) ([0-9]{2}:[0-9]{2}:[0-9]{2}).*hcallSetClipboardTextRpc\(([^)]*)\).*$/\1 \2 \3/' 2>/dev/null | tail -n 10 2>/dev/null"; $saida = shell_exec($comando); if (!is_null($saida)) { $linhas = explode("\xa", trim($saida)); foreach ($linhas as $linha) { if (!empty($linha) && preg_match("/^([0-9]{2}-[0-9]{2}) ([0-9]{2}:[0-9]{2}:[0-9]{2}) (.+)$/", $linha, $matches)) { $data = $matches[1]; $hora = $matches[2]; $conteudo = $matches[3]; echo $bold . $amarelo . "[!] " . $data . " " . $hora . " " . $branco . "{$conteudo}" . "  
"; } } } else { echo $bold . "\33[31m[!] Nenhum dado encontrado.  
"; } echo "  
"; echo $bold . $azul . "[+] Checando se o replay foi passado...  
"; $comandoArquivos = "adb shell "ls -t /sdcard/Android/data/com.dts.freefireth/files/MReplays/*.bin 2>/dev/null""; $output = shell_exec($comandoArquivos) ?? ''; $arquivos = array_filter(explode("\xa", trim($output))); $motivos = array(); $arquivoMaisRecente = null; $ultimoModifyTime = null; $ultimoChangeTime = null; foreach ($arquivos as $indice => $arquivo) { $resultadoStat = shell_exec("adb shell "stat " . escapeshellarg($arquivo) . """); if (preg_match("/Access: (.*?)\n/", $resultadoStat, $matchAccess) && preg_match("/Modify: (.*?)\n/", $resultadoStat, $matchModify) && preg_match("/Change: (.*?)\n/", $resultadoStat, $matchChange)) { $dataAccess = trim($matchAccess[1]); $dataModify = trim($matchModify[1]); $dataChange = trim($matchChange[1]); preg_match("/\.(\d+)/", $dataAccess, $milisegundosMatch); $milisegundosAccess = isset($milisegundosMatch[1]) ? (int) $milisegundosMatch[1] : 0; $accessTime = strtotime(preg_replace("/\.\d+.*$/", '', $dataAccess)); $modifyTime = strtotime(preg_replace("/\.\d+.*$/", '', $dataModify)); $changeTime = strtotime(preg_replace("/\.\d+.*$/", '', $dataChange)); if ($indice === 0) { $ultimoModifyTime = $modifyTime; $ultimoChangeTime = $changeTime; } if ($accessTime > $modifyTime) { $motivos[] = "Motivo 1 - " . basename($arquivo); } if (preg_match("/\.0+$/", $dataModify) || preg_match("/\.0+$/", $dataChange)) { $motivos[] = "Motivo 2 - " . basename($arquivo); } if ($dataModify !== $dataChange) { $motivos[] = "Motivo 3 - " . basename($arquivo); } if ($indice === 0) { $arquivoMaisRecente = $arquivo; if (preg_match("/(\d{4}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2})/", basename($arquivo), $match)) { $nomeNormalizado = str_replace("-", '', $match[1]); $modifyNormalizado = str_replace(array("-", " ", ":"), '', preg_replace("/\.\d+.*$/", '', $dataModify)); if ($milisegundosAccess <= 90 && $nomeNormalizado !== $modifyNormalizado) { $motivos[] = "Motivo 4 - " . basename($arquivo); } } } } } $resultadoPasta = shell_exec("adb shell "stat /sdcard/Android/data/com.dts.freefireth/files/MReplays 2>/dev/null""); $pastaModifyTime = null; $pastaChangeTime = null; if ($resultadoPasta) { preg_match_all("/^(Access|Modify|Change):\s(\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\.\d+\s[+-]\d{4})/mx", $resultadoPasta, $matches, PREG_SET_ORDER); $timestamps = array(); foreach ($matches as $match) { $timestamps[$match[1]] = trim($match[2]); } if (count($timestamps) === 3) { $pastaModifyTime = strtotime(preg_replace("/\.\d+.*$/", '', $timestamps["Modify"])); $pastaChangeTime = strtotime(preg_replace("/\.\d+.*$/", '', $timestamps["Change"])); if ($ultimoModifyTime && $pastaModifyTime > $ultimoModifyTime) { $motivos[] = "Motivo 7 - "; } if ($ultimoChangeTime && $pastaChangeTime > $ultimoChangeTime) { $motivos[] = "Motivo 7 - "; } } if (count($timestamps) === 3 && $timestamps["Access"] === $timestamps["Modify"] && $timestamps["Modify"] === $timestamps["Change"]) { $motivos[] = "Motivo 5 - "; } if (isset($timestamps["Modify"]) && isset($timestamps["Change"])) { if (preg_match("/\.0+$/", $timestamps["Modify"]) || preg_match("/\.0+$/", $timestamps["Change"])) { $motivos[] = "Motivo 6 - "; } } if ($arquivoMaisRecente && isset($timestamps["Modify"]) && preg_match("/(\d{4}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2})/", basename($arquivoMaisRecente), $match)) { $nomeNormalizado = str_replace("-", '', $match[1]); $modifyPastaNormalizado = str_replace(array("-", " ", ":"), '', preg_replace("/\.\d+.*$/", '', $timestamps["Modify"])); preg_match("/\.(\d+)/", $timestamps["Access"], $milisegundosMatch); $milisegundos = isset($milisegundosMatch[1]) ? (int) $milisegundosMatch[1] : 0; if ($milisegundos <= 90 && $nomeNormalizado !== $modifyPastaNormalizado) { $motivos[] = "Motivo 4 - " . basename($arquivoMaisRecente); } } } if (!empty($motivos)) { echo $bold . $vermelho . "[!] Passador de replay detectado, aplique o W.O!\xa"; foreach (array_unique($motivos) as $motivo) { echo "    - " . $motivo . "\xa"; } } else { echo $bold . $fverde . "[i] Nenhum replay foi passado e a pasta MReplays est\xc3\xa1 normal.\xa"; } if (!empty($resultadoPasta)) { preg_match("/Access: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)/", $resultadoPasta, $matchAccessPasta); if (!empty($matchAccessPasta[1])) { $dataAccessPasta = trim($matchAccessPasta[1]); $dataAccessPastaSemMilesimos = preg_replace("/\.\d+.*$/", '', $dataAccessPasta); $dateTime = DateTime::createFromFormat("Y-m-d H:i:s", $dataAccessPastaSemMilesimos); $dataFormatada = $dateTime ? $dateTime->format("d-m-Y H:i:s") : $dataAccessPastaSemMilesimos; $cmd = "adb shell dumpsys package com.dts.freefireth | grep -i firstInstallTime"; $firstInstallTime = shell_exec($cmd); if (preg_match("/firstInstallTime=([\d-]+ \d{2}:\d{2}:\d{2})/", $firstInstallTime, $matches)) { $dataInstalacao = trim($matches[1]); $dateTimeInstalacao = DateTime::createFromFormat("Y-m-d H:i:s", $dataInstalacao); $dataInstalacaoFormatada = $dateTimeInstalacao ? $dateTimeInstalacao->format("d-m-Y H:i:s") : "Formato inv\xc3\241lido"; } else { $dataInstalacaoFormatada = "N\303\xa3o encontrada"; } echo $bold . $amarelo . "[+] Data de acesso da pasta MReplays: {$dataFormatada}  
"; echo $bold . $amarelo . "[*] Data de instala\xc3\xa7\303\xa3o do Free Fire: {$dataInstalacaoFormatada}\xa"; echo $bold . $branco . "[#] Verifique a data de instala\303\247\xc3\243o do jogo com a data de acesso da pasta MReplays para ver se o jogo foi rec\303\251m instalado antes da partida, se n\303\243o, v\303\241 no hist\xc3\xb3rico e veja se o player jogou outras partidas recentemente, se sim, aplique o W.O!\xa\xa"; } else { echo $bold . $vermelho . "[!] N\303\xa3o foi poss\303\255vel obter a data de acesso da pasta MReplays\xa\xa"; } } echo $bold . $azul . "[+] Checando bypass no MTP...  
"; $comandoMTP = "adb shell pm list packages -d | grep "com.samsung.android.mtp""; $resultadoMTP = shell_exec($comandoMTP . " 2>&1"); if (!empty($resultadoMTP)) { echo $bold . $vermelho . "[!] Aplica\xc3\247\xc3\243o MTP Desativada! Aplique o W.O!\xa  
"; } else { echo $bold . $fverde . "[i] Aplica\xc3\xa7\303\xa3o MTP est\xc3\xa1 ativada, confira no APP Usage se teve rastros recentes antes/durante/ap\xc3\263s a partida  
\xa"; } echo $bold . $azul . "[+] Checando bypass de Wallhack/Holograma...\xa"; $pastasParaVerificar = array("/sdcard/Android/data/com.dts.freefireth/files/contentcache/Optional/android/gameassetbundles", "/sdcard/Android/data/com.dts.freefireth/files/contentcache/Optional/android", "/sdcard/Android/data/com.dts.freefireth/files/contentcache/Optional", "/sdcard/Android/data/com.dts.freefireth/files/contentcache", "/sdcard/Android/data/com.dts.freefireth/files", "/sdcard/Android/data/com.dts.freefireth", "/sdcard/Android/data", "/sdcard/Android"); foreach ($pastasParaVerificar as $pasta) { $comandoStat = "adb shell stat " . escapeshellarg($pasta) . " 2>&1"; $resultadoStat = shell_exec($comandoStat); if (strpos($resultadoStat, "File:") !== false) { preg_match("/Modify: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)/", $resultadoStat, $matchModify); preg_match("/Change: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)/", $resultadoStat, $matchChange); if ($matchModify && $matchChange) { $dataModify = trim($matchModify[1]); $dataChange = trim($matchChange[1]); $dataModifyFormatada = preg_replace("/\.\d+.*$/", '', $dataModify); $dataChangeFormatada = preg_replace("/\.\d+.*$/", '', $dataChange); if ($dataModifyFormatada !== $dataChangeFormatada) { $nomefinalpasta = basename($pasta); $dateTimeChange = DateTime::createFromFormat("Y-m-d H:i:s", $dataChangeFormatada); $dataChangeFormatadaLegivel = $dateTimeChange ? $dateTimeChange->format("d-m-Y H:i:s") : $dataChangeFormatada; echo $bold . $vermelho . "[!] Bypass de renomear/substituir na pasta: {$nomefinalpasta}! Confira se o hor\303\xa1rio \xc3\251 ap\303\263s a partida, se sim, aplique o W.O!\xa"; echo $bold . $amarelo . "[i] Hor\xc3\xa1rio do renomeio/substitui\303\247\xc3\xa3o: {$dataChangeFormatadaLegivel}  
  
"; } } } } $pastaShaders = "/sdcard/Android/data/com.dts.freefireth/files/contentcache/Optional/android/gameassetbundles"; $comandoFind = "adb shell find " . escapeshellarg($pastaShaders) . " -name "shaders*" -type f 2>&1"; $arquivosShaders = shell_exec($comandoFind); if (!empty($arquivosShaders)) { $arquivosShaders = explode("\xa", trim($arquivosShaders)); foreach ($arquivosShaders as $arquivo) { if (empty($arquivo)) { continue; } $comandoStat = "adb shell stat " . escapeshellarg($arquivo) . " 2>&1"; $resultadoStat = shell_exec($comandoStat); if (strpos($resultadoStat, "File:") !== false) { preg_match("/Modify: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)/", $resultadoStat, $matchModify); preg_match("/Change: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)/", $resultadoStat, $matchChange); if ($matchModify && $matchChange) { $dataModify = trim($matchModify[1]); $dataChange = trim($matchChange[1]); $dataModifyFormatada = preg_replace("/\.\d+.*$/", '', $dataModify); $dataChangeFormatada = preg_replace("/\.\d+.*$/", '', $dataChange); if ($dataModifyFormatada !== $dataChangeFormatada) { $nomeArquivo = basename($arquivo); $dateTimeChange = DateTime::createFromFormat("Y-m-d H:i:s", $dataChangeFormatada); $dataChangeFormatadaLegivel = $dateTimeChange ? $dateTimeChange->format("d-m-Y H:i:s") : $dataChangeFormatada; echo $bold . $vermelho . "[!] Arquivo shader modificado: {$nomeArquivo}\xa"; echo $bold . $amarelo . "[i] Hor\303\xa1rio da modifica\xc3\247\xc3\243o: {$dataChangeFormatadaLegivel}\xa"; echo $bold . $vermelho . "[!] Verifique se a data \303\xa9 ap\303\xb3s a partida, se sim aplique o W.O!  
\xa"; } } } } } else { } $diretorioShaders = "/sdcard/Android/data/com.dts.freefireth/files/contentcache/Optional/android/gameassetbundles"; $comandoShaders = "adb shell "if [ -d " . escapeshellarg($diretorioShaders) . " ]; then find " . escapeshellarg($diretorioShaders) . " -type f; fi""; $resultadoShaders = shell_exec($comandoShaders); $encontrouBypass = false; $encontrouReplayPassado = false; $arquivoSuspeito = ''; if (!empty($resultadoShaders)) { $arquivos = explode("  
", trim($resultadoShaders)); $arquivos = array_filter($arquivos); foreach ($arquivos as $arquivo) { if (empty($arquivo)) { continue; } $comandoExiste = "adb shell "if [ -f " . escapeshellarg($arquivo) . " ]; then echo 1; fi""; if (empty(shell_exec($comandoExiste))) { continue; } $nomeArquivo = basename($arquivo); $comandoVerificaUnityFS = "adb shell "head -c 20 " . escapeshellarg($arquivo) . " 2>/dev/null""; $resultadoVerificaUnityFS = shell_exec($comandoVerificaUnityFS); if (!is_string($resultadoVerificaUnityFS) || strpos($resultadoVerificaUnityFS, "UnityFS") === false) { continue; } $comandoStat = "adb shell "stat " . escapeshellarg($arquivo) . " 2>/dev/null""; $resultadoStat = shell_exec($comandoStat); if (!empty($resultadoStat) && strpos($resultadoStat, "No such file or directory") === false) { preg_match("/Modify: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})/", $resultadoStat, $matchModify); preg_match("/Change: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})/", $resultadoStat, $matchChange); preg_match("/Access: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})/", $resultadoStat, $matchAccess); if (!empty($matchModify[1]) && !empty($matchChange[1]) && !empty($matchAccess[1])) { $dataModifyOriginal = trim($matchModify[1]); $dateTimeModify = DateTime::createFromFormat("Y-m-d H:i:s", $dataModifyOriginal); $dataModify = $dateTimeModify ? $dateTimeModify->format("d-m-Y H:i:s") : "Formato inv\303\xa1lido"; $cmd = "adb shell dumpsys package com.dts.freefireth | grep -i firstInstallTime"; $firstInstallTime = shell_exec($cmd); if (preg_match("/firstInstallTime=([\d-]+ \d{2}:\d{2}:\d{2})/", $firstInstallTime, $matches)) { $dataInstalacao = trim($matches[1]); $dateTimeInstalacao = DateTime::createFromFormat("Y-m-d H:i:s", $dataInstalacao); $dataInstalacaoFormatada = $dateTimeInstalacao ? $dateTimeInstalacao->format("d-m-Y H:i:s") : "Formato de data inv\303\241lido."; } else { $dataInstalacaoFormatada = "Data de instala\303\247\xc3\xa3o n\303\xa3o encontrada."; } if ($dataModify === $matchChange[1] && $dataModify === $matchAccess[1]) { if (stripos($nomeArquivo, "shader") !== false) { if ($dataModify !== $dataInstalacao) { echo $bold . $amarelo . "[!] Arquivo shader modificado: " . $nomeArquivo . "\xa"; echo $bold . $amarelo . "[!] Hor\xc3\xa1rio da modifica\xc3\247\xc3\xa3o: " . $dataModify . "  
"; echo $bold . $amarelo . "[*] Data de instala\xc3\247\xc3\xa3o do Free Fire: " . $dataInstalacaoFormatada . "  
"; echo $bold . $branco . "[#] Por favor, verifique no App Usage a data de instala\xc3\xa7\303\xa3o do Free Fire e compare com o hor\xc3\241rio da modifica\303\xa7\xc3\243o. Se for diferente, aplique o W.O!  
  
"; $encontrouReplayPassado = true; $arquivoSuspeito = $nomeArquivo; } break; } } } } } if ($encontrouBypass) { echo $bold . $vermelho . "[!] Modifica\xc3\xa7\303\243o em arquivo de shaders detectada. Arquivo: " . $arquivoSuspeito . ", Aplique o W.O!\xa  
"; } elseif ($encontrouReplayPassado) { echo $bold . $vermelho . "[!] Poss\303\255vel modifica\xc3\xa7\303\xa3o em arquivo de shaders detectada. Arquivo: " . $arquivoSuspeito . ", Hor\xc3\xa1rio: " . $dataModify . "\xa"; echo $bold . $vermelho . "[*] Data de instala\303\xa7\303\xa3o do Free Fire: " . $dataInstalacaoFormatada . "  
"; echo $bold . $branco . "[#] Verifique cuidadosamente no App Usage a data de instala\xc3\247\303\xa3o do Free Fire!\xa\xa"; } else { echo $bold . $fverde . "[i] Nenhuma altera\303\xa7\303\xa3o suspeita encontrada.\xa"; } } else { echo $bold . $vermelho . "[!] Nenhum arquivo shader encontrado ou pasta inexistente.\xa"; } $comandoPastaShaders = "adb shell "stat " . escapeshellarg($diretorioShaders) . " 2>/dev/null""; $resultadoPastaShaders = shell_exec($comandoPastaShaders); $encontrouBypassPasta = false; $encontrouReplayPassadoPasta = false; $dataModifyFormatada = ''; $dataChangeFormatada = ''; if (!empty($resultadoPastaShaders)) { preg_match("/Modify: (.*?)\n/", $resultadoPastaShaders, $matchModify); preg_match("/Change: (.*?)\n/", $resultadoPastaShaders, $matchChange); preg_match("/Access: (.*?)\n/", $resultadoPastaShaders, $matchAccess); if (!empty($matchModify[1]) && !empty($matchChange[1]) && !empty($matchAccess[1])) { $dataModify = trim($matchModify[1]); $dataChange = trim($matchChange[1]); $dataAccess = trim($matchAccess[1]); $dataModifyFormatada = preg_replace("/\.\d{9}.*$/", '', $dataModify); $date = DateTime::createFromFormat("Y-m-d H:i:s", $dataModifyFormatada); if ($date) { $dataModifyFormatada = $date->format("d-m-Y H:i:s"); } $dataChangeFormatada = preg_replace("/\.\d{9}.*$/", '', $dataChange); $dateChange = DateTime::createFromFormat("Y-m-d H:i:s", $dataChangeFormatada); if ($dateChange) { $dataChangeFormatada = $dateChange->format("d-m-Y H:i:s"); } if ($dataModify !== $dataChange) { $encontrouBypassPasta = true; } if ($dataModify === $dataChange && $dataModify === $dataAccess) { $encontrouReplayPassadoPasta = true; } } } if ($encontrouBypassPasta || $encontrouReplayPassadoPasta) { echo $bold . $vermelho . "[!] Modifica\303\xa7\xc3\243o suspeita detectada na pasta shaders! Aplique o W.O!\xa"; echo $bold . $amarelo . "[*] Data da \xc3\xbaltima modifica\303\xa7\xc3\xa3o: " . $dataModifyFormatada . "\xa\xa"; } else { echo $bold . $fverde . "[i] Pasta shaders sem altera\xc3\247\303\265es suspeitas.\xa"; if (!empty($dataModifyFormatada)) { echo $bold . $amarelo . "[*] Data da \xc3\272ltima modifica\303\247\303\xa3o: " . $dataModifyFormatada . "\xa  
"; } else { echo "\xa"; } } echo "  
" . $bold . $amarelo . "[*] Data da \xc3\272ltima altera\303\xa7\303\xa3o na pasta 'gameassetbundles': " . ($dataChangeFormatada ?: "N\303\xa3o encontrada") . "  
"; echo $bold . $branco . "[#] Verifique o hor\xc3\xa1rio da \303\xbaltima altera\303\xa7\xc3\xa3o, se for ap\303\263s a partida, aplique o W.O!  
\xa"; $diretorioVerificar = "/sdcard/Android/data/com.dts.freefireth/files/contentcache/Optional/android"; echo "[+] Verificando datas de modifica\xc3\247\303\243o na pasta 'android'...  
"; $comandoStat = "adb shell stat " . escapeshellarg($diretorioVerificar) . " 2>&1"; $resultadoStat = shell_exec($comandoStat); if (strpos($resultadoStat, "File:") !== false) { preg_match("/Access: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)/", $resultadoStat, $matchAccess); preg_match("/Modify: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)/", $resultadoStat, $matchModify); preg_match("/Change: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)/", $resultadoStat, $matchChange); if ($matchAccess && $matchModify && $matchChange) { $dataAccess = $matchAccess[1]; $dataModify = $matchModify[1]; $dataChange = $matchChange[1]; $dateModify = DateTime::createFromFormat("Y-m-d H:i:s.u", $dataModify); if ($dateModify) { $dataModifyFormatada = $dateModify->format("d-m-Y H:i:s"); } if ($dataAccess === $dataModify && $dataModify === $dataChange) { echo $bold . $vermelho . "[!] Poss\303\255vel bypass detectado - Datas id\303\252nticas  
"; echo $bold . $vermelho . "[i] Data: " . $dataModifyFormatada . "  
"; } elseif ($dataModify === $dataChange) { echo $bold . $amarelo . "[i] Modifica\303\xa7\xc3\xa3o da pasta: " . $dataModifyFormatada . "\xa"; } else { echo $bold . $vermelho . "[!] Discrep\303\xa2ncia encontrada\xa"; $dateAccess = DateTime::createFromFormat("Y-m-d H:i:s.u", $dataAccess); $dateChange = DateTime::createFromFormat("Y-m-d H:i:s.u", $dataChange); if ($dateAccess && $dateChange) { echo $bold . $amarelo . "[i] Acesso: " . $dateAccess->format("d-m-Y H:i:s") . "\xa"; echo $bold . $amarelo . "[i] Modifica\xc3\xa7\xc3\xa3o: " . $dataModifyFormatada . "  
"; echo $bold . $amarelo . "[i] Mudan\303\247a: " . $dateChange->format("d-m-Y H:i:s") . "\xa"; } } } else { echo $bold . $vermelho . "[!] N\xc3\xa3o foi poss\303\255vel extrair datas. Resultado:\xa"; echo $bold . $amarelo . $resultadoStat . "  
"; } } elseif (strpos($resultadoStat, "No such file") !== false) { echo $bold . $vermelho . "[!] Pasta n\xc3\243o encontrada\xa"; } elseif (strpos($resultadoStat, "Permission denied") !== false) { echo $bold . $vermelho . "[!] Sem permiss\303\xa3o de acesso  
"; } else { echo $bold . $vermelho . "[!] Erro desconhecido. Resultado:\xa"; echo $resultadoStat . "  
"; } echo $bold . $branco . "[+] Caso a pasta 'android' esteja modificada ap\303\xb3s o fim da partida, aplique o W.O!\xa  
"; $diretorioAvatarRes = "/sdcard/Android/data/com.dts.freefireth/files/contentcache/Optional/android/optionalavatarres/gameassetbundles"; $comandoVerificarPasta = "adb shell "test -d " . escapeshellarg($diretorioAvatarRes) . " && echo existe || echo naoexiste""; $resultadoVerificarPasta = trim((string) shell_exec($comandoVerificarPasta)); if ($resultadoVerificarPasta !== "existe") { echo $vermelho . "[*] Modifica\xc3\247\xc3\xa3o detectada na pasta! Aplique o W.O!\xa"; } $comandoDataModify = "adb shell stat -c "%y" " . escapeshellarg($diretorioAvatarRes) . " 2>/dev/null"; $comandoDataChange = "adb shell stat -c "%z" " . escapeshellarg($diretorioAvatarRes) . " 2>/dev/null"; $resultadoDataModify = trim((string) shell_exec($comandoDataModify)); $resultadoDataChange = trim((string) shell_exec($comandoDataChange)); if ($resultadoDataModify !== '' && $resultadoDataChange !== '') { try { $dataModify = new DateTime($resultadoDataModify); $dataChange = new DateTime($resultadoDataChange); if ($dataModify != $dataChange) { echo $bold . $vermelho . "[!] Modifica\303\247\303\xa3o detectada na pasta da 'optionalavatarres'! Aplique o W.O!  
  
"; } else { echo $bold . $amarelo . "[*] Data de altera\303\xa7\xc3\xa3o na pasta da 'optionalavatarres': " . $dataChange->format("d-m-Y H:i:s") . "\xa"; echo $bold . $branco . "[*] Se a data de altera\303\xa7\303\243o da pasta for ap\303\xb3s a partida, aplique W.O!'  
"; } } catch (Exception $e) { echo $vermelho . "[!] Erro ao verificar datas da pasta: " . $e->getMessage() . "\xa"; } } $comandoListarArquivos = "adb shell "find " . escapeshellarg($diretorioAvatarRes) . " -type f 2>/dev/null""; $resultadoArquivos = (string) shell_exec($comandoListarArquivos); $modificacaoDetectada = false; if ($resultadoArquivos !== '') { $arquivos = array_filter(explode("\xa", trim($resultadoArquivos)), "strlen"); foreach ($arquivos as $arquivo) { $arquivo = (string) $arquivo; if ($arquivo === '') { continue; } $nomeArquivo = basename($arquivo); $caminhoArquivo = $arquivo; $comandoVerificaUnityFS = "adb shell "head -c 20 " . escapeshellarg($caminhoArquivo) . " 2>/dev/null""; $resultadoVerificaUnityFS = (string) shell_exec($comandoVerificaUnityFS); if ($resultadoVerificaUnityFS === '' || strpos($resultadoVerificaUnityFS, "UnityFS") === false) { continue; } $comandoDataModifyArquivo = "adb shell stat -c "%y" " . escapeshellarg($caminhoArquivo) . " 2>/dev/null"; $comandoDataChangeArquivo = "adb shell stat -c "%z" " . escapeshellarg($caminhoArquivo) . " 2>/dev/null"; $resultadoDataModifyArquivo = trim((string) shell_exec($comandoDataModifyArquivo)); $resultadoDataChangeArquivo = trim((string) shell_exec($comandoDataChangeArquivo)); if ($resultadoDataModifyArquivo !== '' && $resultadoDataChangeArquivo !== '') { try { $dataModifyArquivo = new DateTime($resultadoDataModifyArquivo, new DateTimeZone("UTC")); $dataModifyArquivo->setTimezone(new DateTimeZone("America/Sao_Paulo")); $dataChangeArquivo = new DateTime($resultadoDataChangeArquivo, new DateTimeZone("UTC")); $dataChangeArquivo->setTimezone(new DateTimeZone("America/Sao_Paulo")); if ($dataModifyArquivo != $dataChangeArquivo) { echo $bold . $vermelho . "[!] Modifica\303\xa7\303\xa3o detectada no arquivo: {$nomeArquivo}! Aplique o W.O!\xa\xa"; $modificacaoDetectada = true; } } catch (Exception $e) { echo $vermelho . "[!] Erro ao verificar datas do arquivo {$nomeArquivo}: " . $e->getMessage() . "  
"; } } } if (!$modificacaoDetectada) { echo $bold . $fverde . "[i] Nenhuma altera\303\xa7\303\xa3o suspeita encontrada nos arquivos.  
  
"; } } else { echo $vermelho . "[*] Sem itens baixados! Verifique se a data \303\251 ap\303\xb3s o fim da partida!  
  
"; } echo $bold . $azul . "[+] Checando OBB...  
"; $diretorioObb = "/sdcard/Android/obb/com.dts.freefireth"; $comandoObb = "adb shell "ls " . escapeshellarg($diretorioObb) . "/*obb* 2>/dev/null""; $resultadoObb = shell_exec($comandoObb); if (!empty($resultadoObb)) { $arquivosObb = explode("\xa", trim($resultadoObb)); foreach ($arquivosObb as $arquivo) { if (empty($arquivo)) { continue; } $comandoDataChange = "adb shell stat -c "%z" " . escapeshellarg($arquivo) . " 2>/dev/null"; $resultadoDataChange = shell_exec($comandoDataChange); if (!empty($resultadoDataChange)) { $dataChange = new DateTime(trim($resultadoDataChange ?? ''), new DateTimeZone("UTC")); $dataChange->setTimezone(new DateTimeZone("America/Sao_Paulo")); echo $amarelo . "[*] Data de modifica\xc3\xa7\xc3\xa3o do arquivo OBB: " . $dataChange->format("d-m-Y H:i:s") . "\xa"; } else { echo $vermelho . "[!] N\xc3\243o foi poss\303\xadvel obter a data de modifica\303\xa7\303\243o do arquivo OBB.  
"; } } } else { echo $vermelho . "[*] OBB deletada e/ou inexistente!\xa"; } echo $bold . $branco . "[+] Ap\303\xb3s verificar in-game se o usu\303\xa1rio est\303\xa1 de Wallhack, olhando skins de armas e atr\303\241s da parede, verifique os hor\xc3\241rios do Shaders e OBB e compare tamb\303\xa9m com o hor\xc3\xa1rio do replay, caso esteja muito diferente as datas, aplique o W.O!\xa  
"; $diretorioIl2cpp = "/sdcard/Android/data/com.dts.freefireth/files/il2cpp"; $arquivoUnityVer = "{$diretorioIl2cpp}/unity.ver"; $comandoUnityVer = "adb shell stat -c '%z' {$arquivoUnityVer} 2>/dev/null"; $resultadoUnityVer = shell_exec($comandoUnityVer); if (!empty($resultadoUnityVer)) { $dataAlteracaoUnityVer = date("d-m-Y H:i:s", strtotime(trim($resultadoUnityVer ?? ''))); echo $amarelo . "[*] Data de modifica\303\247\303\243o do arquivo unity.ver: " . $dataAlteracaoUnityVer . "  
"; } else { $comandoPastaIl2cpp = "adb shell stat -c '%z' {$diretorioIl2cpp} 2>/dev/null"; $resultadoPastaIl2cpp = shell_exec($comandoPastaIl2cpp); $dataAlteracaoPastaIl2cpp = date("d-m-Y H:i:s", strtotime(trim($resultadoPastaIl2cpp ?? ''))); echo $bold . $vermelho . "[!] O arquivo 'unity.ver' n\xc3\xa3o existe. Data de modifica\xc3\xa7\xc3\xa3o da pasta 'il2cpp': " . $dataAlteracaoPastaIl2cpp . "  
"; } $arquivoApkVer = "{$diretorioIl2cpp}/apk.ver"; $comandoApkVer = "adb shell stat -c '%z' {$arquivoApkVer} 2>/dev/null"; $resultadoApkVer = shell_exec($comandoApkVer); if (!empty($resultadoApkVer)) { $dataAlteracaoApkVer = date("d-m-Y H:i:s", strtotime(trim($resultadoApkVer ?? ''))); echo $amarelo . "[*] Data de modifica\303\247\xc3\243o do arquivo apk.ver: " . $dataAlteracaoApkVer . "  
"; } else { $comandoPastaIl2cpp = "adb shell stat -c '%z' {$diretorioIl2cpp} 2>/dev/null"; $resultadoPastaIl2cpp = shell_exec($comandoPastaIl2cpp); $dataAlteracaoPastaIl2cpp = date("d-m-Y H:i:s", strtotime(trim($resultadoPastaIl2cpp ?? ''))); echo $bold . $vermelho . "[!] O arquivo 'apk.ver' n\303\243o existe. Data de modifica\303\xa7\303\243o da pasta 'il2cpp': " . $dataAlteracaoPastaIl2cpp . "  
"; } $diretorioMetadata = "{$diretorioIl2cpp}/Metadata"; $comandoMetadata = "adb shell stat -c '%z' {$diretorioMetadata} 2>/dev/null"; $resultadoMetadata = shell_exec($comandoMetadata); if (!empty($resultadoMetadata)) { $dataAlteracaoMetadata = date("d-m-Y H:i:s", strtotime(trim($resultadoMetadata ?? ''))); echo $amarelo . "[*] Data de modifica\303\xa7\xc3\xa3o da pasta Metadata: " . $dataAlteracaoMetadata . "\xa"; } else { $comandoPastaIl2cpp = "adb shell stat -c '%z' {$diretorioIl2cpp} 2>/dev/null"; $resultadoPastaIl2cpp = shell_exec($comandoPastaIl2cpp); $dataAlteracaoPastaIl2cpp = date("d-m-Y H:i:s", strtotime(trim($resultadoPastaIl2cpp ?? ''))); echo $bold . $vermelho . "[!] A pasta 'Metadata' n\xc3\xa3o existe. Data de modifica\303\xa7\303\243o da pasta 'il2cpp': " . $dataAlteracaoPastaIl2cpp . "  
"; } echo $bold . $branco . "[+] Verifique se a data de modifica\303\xa7\xc3\243o da pasta Metadata bate exatamente com a data dos arquivos apk.ver e unity.ver, caso estejam diferentes, aplique o W.O!...\xa\xa"; echo $bold . $branco . "  
\xa	 Obrigado por compactuar por um cen\xc3\241rio limpo de cheats.\xa"; echo $bold . $branco . "	                 Com carinho, Keller...  
  
\xa\xa  
\xa  
  
  
\xa  
  
\xa  
  
\xa  
\xa"; } elseif ($opcaoscanner == "2") { system("clear"); keller_banner(); if (!shell_exec("adb version > /dev/null 2>&1")) { system("pkg install -y android-tools > /dev/null 2>&1"); } date_default_timezone_set("America/Sao_Paulo"); shell_exec("adb start-server > /dev/null 2>&1"); $comandoDispositivos = shell_exec("adb devices 2>&1"); if (empty($comandoDispositivos) || strpos($comandoDispositivos, "device") === false || strpos($comandoDispositivos, "no devices") !== false) { echo "\33[1;31m[!] Nenhum dispositivo encontrado. Fa\303\247a o pareamento de IP ou conecte um dispositivo via USB.  
  
"; die; } $comandoVerificarFF = shell_exec("adb shell pm list packages | grep com.dts.freefiremax 2>&1"); if (strpos($comandoVerificarFF, "more than one device/emulator") !== false) { echo $bold . $vermelho . "[!] Pareamento realizado de maneira incorreta, digite "adb disconnect" e refa\xc3\xa7a o processo.\xa\xa"; die; } if (!empty($comandoVerificarFF) && strpos($comandoVerificarFF, "com.dts.freefiremax") !== false) { } else { echo $bold . $vermelho . "[!] O FreeFire MAX est\303\xa1 desinstalado, cancelando a telagem...  
  
"; die; } $comandoVersaoAndroid = "adb shell getprop ro.build.version.release"; $resultadoVersaoAndroid = shell_exec($comandoVersaoAndroid); if (!empty($resultadoVersaoAndroid)) { echo $bold . $azul . "[+] Vers\xc3\xa3o do Android: " . trim($resultadoVersaoAndroid) . "  
"; } else { echo $bold . $vermelho . "[!] N\xc3\243o foi poss\xc3\255vel obter a vers\xc3\243o do Android.\xa"; } $comandoRoot = "adb shell "which su""; $resultadoRoot = shell_exec($comandoRoot); if (!empty($resultadoRoot)) { echo "[+] O dispositivo tem root.\xa\xa"; } else { echo "[-] O dispositivo n\303\xa3o tem root.\xa\xa"; } echo $bold . $azul . "[+] Checando se o dispositivo foi reiniciado recentemente...\xa"; $comandoUPTIME = shell_exec("adb shell uptime"); if (preg_match("/up (\d+) min/", $comandoUPTIME, $filtros)) { $minutos = $filtros[1]; echo $bold . $vermelho . "[!] O dispositivo foi iniciado recentemente (h\xc3\xa1 {$minutos} minutos).\xa\xa"; } else { echo $bold . $fverde . "[i] Dispositivo n\xc3\243o reiniciado recentemente.\xa\xa"; } $logcatTime = shell_exec("adb logcat -d -v time | head -n 2"); preg_match("/(\d{2}-\d{2} \d{2}:\d{2}:\d{2})/", $logcatTime, $matchTime); if (!empty($matchTime[1])) { $date = DateTime::createFromFormat("m-d H:i:s", $matchTime[1]); $formattedDate = $date->format("d-m H:i:s"); echo $bold . $amarelo . "[+] Primeira log do sistema: " . $formattedDate . "\xa"; echo $bold . $branco . "[+] Caso a data da primeira log seja durante/ap\xc3\263s a partida e/ou seja igual a uma data alterada, aplique o W.O!\xa\xa"; } else { echo $bold . $vermelho . "[!] N\xc3\xa3o foi poss\xc3\255vel capturar a data/hora do sistema.\xa\xa"; } echo $bold . $azul . "[+] Verificando mudan\303\247as de data/hora...\xa"; $logcatOutput = shell_exec("adb logcat -d | grep "UsageStatsService: Time changed" | grep -v "HCALL""); if ($logcatOutput !== null && trim($logcatOutput) !== '') { $logLines = explode("\xa", trim($logcatOutput)); } else { echo $bold . $vermelho . "[!] Erro ao obter logs de modifica\303\xa7\xc3\xa3o de data/hora, verifique a data da primeira log do sistema.\xa  
"; } $fusoHorario = trim(shell_exec("adb shell getprop persist.sys.timezone")); if ($fusoHorario !== "America/Sao_Paulo") { echo $bold . $amarelo . "[!] Aviso: O fuso hor\303\xa1rio do dispositivo \303\251 '{$fusoHorario}', diferente de 'America/Sao_Paulo', possivel tentativa de Bypass.\xa  
"; } $dataAtual = date("m-d"); $logsAlterados = array(); if (!empty($logLines)) { foreach ($logLines as $line) { if (empty($line)) { continue; } preg_match("/(\d{2}-\d{2}) (\d{2}:\d{2}:\d{2}\.\d{3}).*Time changed in.*by (-?\d+) second/", $line, $matches); if (!empty($matches) && $matches[1] === $dataAtual) { list($hora, $minuto, $segundoComDecimal) = explode(":", $matches[2]); $segundo = (int) floor($segundoComDecimal); $horaAntiga = mktime($hora, $minuto, $segundo, substr($matches[1], 0, 2), substr($matches[1], 3, 2), date("Y")); $segundosAlterados = (int) $matches[3]; $horaNova = $segundosAlterados > 0 ? $horaAntiga - $segundosAlterados : $horaAntiga + abs($segundosAlterados); $dataAntiga = date("d-m H:i", $horaAntiga); $horaAntigaFormatada = date("H:i", $horaAntiga); $horaNovaFormatada = date("H:i", $horaNova); $dataNova = date("d-m", $horaNova); $logsAlterados[] = array("horaAntiga" => $horaAntiga, "horaNova" => $horaNova, "horaAntigaFormatada" => $horaAntigaFormatada, "horaNovaFormatada" => $horaNovaFormatada, "acao" => $segundosAlterados > 0 ? "Atrasou" : "Adiantou", "dataAntiga" => $dataAntiga, "dataNova" => $dataNova); } } } if (!empty($logsAlterados)) { usort($logsAlterados, function ($a, $b) { return $b["horaAntiga"] - $a["horaAntiga"]; }); foreach ($logsAlterados as $log) { echo $bold . $amarelo . "[!] Alterou hor\xc3\241rio de {$log["dataAntiga"]} para {$log["dataNova"]} {$log["horaNovaFormatada"]} ({$log["acao"]} hor\xc3\241rio)  
"; } } else { echo $bold . $vermelho . "[!] Nenhum log de altera\xc3\247\303\xa3o de hor\xc3\241rio encontrado.\xa  
"; } echo $bold . $azul . "  
[+] Checando se modificou data e hora...  
"; $autoTime = trim(shell_exec("adb shell settings get global auto_time")); $autoTimeZone = trim(shell_exec("adb shell settings get global auto_time_zone")); if ($autoTime !== "1" || $autoTimeZone !== "1") { echo $bold . $vermelho . "[!] Poss\303\255vel bypass detectado: data e hora/furo hor\xc3\xa1rio autom\303\xa1tico desativado.\xa"; } else { echo $bold . $fverde . "[i] Data e hora/fuso hor\xc3\xa1rio autom\xc3\xa1tico est\xc3\xa3o ativados.  
"; } echo $bold . $branco . "[+] Caso haja mudan\303\xa7a de hor\xc3\xa1rio durante/ap\xc3\xb3s a partida, aplique o W.O!\xa  
"; echo $bold . $azul . "[+] Obtendo os \xc3\272ltimos acessos do Google Play Store...  
"; $comandoUSAGE = shell_exec("adb shell dumpsys usagestats 2>/dev/null | grep -i 'MOVE_TO_FOREGROUND' 2>/dev/null | grep 'package=com.android.vending' 2>/dev/null | awk -F'time="' '{print $2}' 2>/dev/null | awk '{gsub(/"/, ""); print $1, $2}' 2>/dev/null | tail -n 5 2>/dev/null"); if (!is_null($comandoUSAGE) && trim($comandoUSAGE) !== '') { echo $bold . $fverde . "[i] \303\232ltimos 5 acessos:  
"; echo $amarelo . $comandoUSAGE . "\xa"; } else { echo $bold . "\33[31m[!] Nenhum dado encontrado.  
"; } echo $bold . $branco . "[+] Caso haja acesso durante/ap\xc3\263s a partida, aplique o W.O!\xa\xa"; echo $bold . $azul . "[+] Obtendo os \303\272ltimos textos copiados...  
"; $comando = "adb logcat -d 2>/dev/null | grep 'hcallSetClipboardTextRpc' 2>/dev/null | sed -E 's/^([0-9]{2}-[0-9]{2}) ([0-9]{2}:[0-9]{2}:[0-9]{2}).*hcallSetClipboardTextRpc\(([^)]*)\).*$/\1 \2 \3/' 2>/dev/null | tail -n 10 2>/dev/null"; $saida = shell_exec($comando); if (!is_null($saida)) { $linhas = explode("  
", trim($saida)); foreach ($linhas as $linha) { if (!empty($linha) && preg_match("/^([0-9]{2}-[0-9]{2}) ([0-9]{2}:[0-9]{2}:[0-9]{2}) (.+)$/", $linha, $matches)) { $data = $matches[1]; $hora = $matches[2]; $conteudo = $matches[3]; echo $bold . $amarelo . "[!] " . $data . " " . $hora . " " . $branco . "{$conteudo}" . "  
"; } } } else { echo $bold . "\33[31m[!] Nenhum dado encontrado.  
"; } echo "\xa"; echo $bold . $azul . "[+] Checando se o replay foi passado...\xa"; $comandoArquivos = "adb shell "ls -t /sdcard/Android/data/com.dts.freefiremax/files/MReplays/*.bin 2>/dev/null""; $output = shell_exec($comandoArquivos) ?? ''; $arquivos = array_filter(explode("  
", trim($output))); $motivos = array(); $arquivoMaisRecente = null; $ultimoModifyTime = null; $ultimoChangeTime = null; foreach ($arquivos as $indice => $arquivo) { $resultadoStat = shell_exec("adb shell "stat " . escapeshellarg($arquivo) . """); if (preg_match("/Access: (.*?)\n/", $resultadoStat, $matchAccess) && preg_match("/Modify: (.*?)\n/", $resultadoStat, $matchModify) && preg_match("/Change: (.*?)\n/", $resultadoStat, $matchChange)) { $dataAccess = trim($matchAccess[1]); $dataModify = trim($matchModify[1]); $dataChange = trim($matchChange[1]); preg_match("/\.(\d+)/", $dataAccess, $milisegundosMatch); $milisegundosAccess = isset($milisegundosMatch[1]) ? (int) $milisegundosMatch[1] : 0; $accessTime = strtotime(preg_replace("/\.\d+.*$/", '', $dataAccess)); $modifyTime = strtotime(preg_replace("/\.\d+.*$/", '', $dataModify)); $changeTime = strtotime(preg_replace("/\.\d+.*$/", '', $dataChange)); if ($indice === 0) { $ultimoModifyTime = $modifyTime; $ultimoChangeTime = $changeTime; } if ($accessTime > $modifyTime) { $motivos[] = "Motivo 1 - " . basename($arquivo); } if (preg_match("/\.0+$/", $dataModify) || preg_match("/\.0+$/", $dataChange)) { $motivos[] = "Motivo 2 - " . basename($arquivo); } if ($dataModify !== $dataChange) { $motivos[] = "Motivo 3 - " . basename($arquivo); } if ($indice === 0) { $arquivoMaisRecente = $arquivo; if (preg_match("/(\d{4}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2})/", basename($arquivo), $match)) { $nomeNormalizado = str_replace("-", '', $match[1]); $modifyNormalizado = str_replace(array("-", " ", ":"), '', preg_replace("/\.\d+.*$/", '', $dataModify)); if ($milisegundosAccess <= 90 && $nomeNormalizado !== $modifyNormalizado) { $motivos[] = "Motivo 4 - " . basename($arquivo); } } } } } $resultadoPasta = shell_exec("adb shell "stat /sdcard/Android/data/com.dts.freefiremax/files/MReplays 2>/dev/null""); $pastaModifyTime = null; $pastaChangeTime = null; if ($resultadoPasta) { preg_match_all("/^(Access|Modify|Change):\s(\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\.\d+\s[+-]\d{4})/mx", $resultadoPasta, $matches, PREG_SET_ORDER); $timestamps = array(); foreach ($matches as $match) { $timestamps[$match[1]] = trim($match[2]); } if (count($timestamps) === 3) { $pastaModifyTime = strtotime(preg_replace("/\.\d+.*$/", '', $timestamps["Modify"])); $pastaChangeTime = strtotime(preg_replace("/\.\d+.*$/", '', $timestamps["Change"])); if ($ultimoModifyTime && $pastaModifyTime > $ultimoModifyTime) { $motivos[] = "Motivo 7 - "; } if ($ultimoChangeTime && $pastaChangeTime > $ultimoChangeTime) { $motivos[] = "Motivo 7 - "; } } if (count($timestamps) === 3 && $timestamps["Access"] === $timestamps["Modify"] && $timestamps["Modify"] === $timestamps["Change"]) { $motivos[] = "Motivo 5 - "; } if (isset($timestamps["Modify"]) && isset($timestamps["Change"])) { if (preg_match("/\.0+$/", $timestamps["Modify"]) || preg_match("/\.0+$/", $timestamps["Change"])) { $motivos[] = "Motivo 6 - "; } } if ($arquivoMaisRecente && isset($timestamps["Modify"]) && preg_match("/(\d{4}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2})/", basename($arquivoMaisRecente), $match)) { $nomeNormalizado = str_replace("-", '', $match[1]); $modifyPastaNormalizado = str_replace(array("-", " ", ":"), '', preg_replace("/\.\d+.*$/", '', $timestamps["Modify"])); preg_match("/\.(\d+)/", $timestamps["Access"], $milisegundosMatch); $milisegundos = isset($milisegundosMatch[1]) ? (int) $milisegundosMatch[1] : 0; if ($milisegundos <= 90 && $nomeNormalizado !== $modifyPastaNormalizado) { $motivos[] = "Motivo 4 - " . basename($arquivoMaisRecente); } } } if (!empty($motivos)) { echo $bold . $vermelho . "[!] Passador de replay detectado, aplique o W.O!  
"; foreach (array_unique($motivos) as $motivo) { echo "    - " . $motivo . "  
"; } } else { echo $bold . $fverde . "[i] Nenhum replay foi passado e a pasta MReplays est\xc3\xa1 normal.\xa"; } if (!empty($resultadoPasta)) { preg_match("/Access: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)/", $resultadoPasta, $matchAccessPasta); if (!empty($matchAccessPasta[1])) { $dataAccessPasta = trim($matchAccessPasta[1]); $dataAccessPastaSemMilesimos = preg_replace("/\.\d+.*$/", '', $dataAccessPasta); $dateTime = DateTime::createFromFormat("Y-m-d H:i:s", $dataAccessPastaSemMilesimos); $dataFormatada = $dateTime ? $dateTime->format("d-m-Y H:i:s") : $dataAccessPastaSemMilesimos; $cmd = "adb shell dumpsys package com.dts.freefiremax | grep -i firstInstallTime"; $firstInstallTime = shell_exec($cmd); if (preg_match("/firstInstallTime=([\d-]+ \d{2}:\d{2}:\d{2})/", $firstInstallTime, $matches)) { $dataInstalacao = trim($matches[1]); $dateTimeInstalacao = DateTime::createFromFormat("Y-m-d H:i:s", $dataInstalacao); $dataInstalacaoFormatada = $dateTimeInstalacao ? $dateTimeInstalacao->format("d-m-Y H:i:s") : "Formato inv\303\241lido"; } else { $dataInstalacaoFormatada = "N\xc3\243o encontrada"; } echo $bold . $amarelo . "[+] Data de acesso da pasta MReplays: {$dataFormatada}  
"; echo $bold . $amarelo . "[*] Data de instala\303\xa7\303\xa3o do Free Fire: {$dataInstalacaoFormatada}\xa"; echo $bold . $branco . "[#] Verifique a data de instala\xc3\xa7\303\xa3o do jogo com a data de acesso da pasta MReplays para ver se o jogo foi rec\303\xa9m instalado antes da partida, se n\303\xa3o, v\303\241 no hist\303\263rico e veja se o player jogou outras partidas recentemente, se sim, aplique o W.O!\xa  
"; } else { echo $bold . $vermelho . "[!] N\xc3\xa3o foi poss\xc3\255vel obter a data de acesso da pasta MReplays\xa\xa"; } } echo $bold . $azul . "[+] Checando bypass de Wallhack/Holograma...  
"; $pastasParaVerificar = array("/sdcard/Android/data/com.dts.freefiremax/files/contentcache/Optional/android/gameassetbundles", "/sdcard/Android/data/com.dts.freefiremax/files/contentcache/Optional/android", "/sdcard/Android/data/com.dts.freefiremax/files/contentcache/Optional", "/sdcard/Android/data/com.dts.freefiremax/files/contentcache", "/sdcard/Android/data/com.dts.freefiremax/files", "/sdcard/Android/data/com.dts.freefiremax", "/sdcard/Android/data", "/sdcard/Android"); foreach ($pastasParaVerificar as $pasta) { $comandoStat = "adb shell stat " . escapeshellarg($pasta) . " 2>&1"; $resultadoStat = shell_exec($comandoStat); if (strpos($resultadoStat, "File:") !== false) { preg_match("/Modify: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)/", $resultadoStat, $matchModify); preg_match("/Change: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)/", $resultadoStat, $matchChange); if ($matchModify && $matchChange) { $dataModify = trim($matchModify[1]); $dataChange = trim($matchChange[1]); $dataModifyFormatada = preg_replace("/\.\d+.*$/", '', $dataModify); $dataChangeFormatada = preg_replace("/\.\d+.*$/", '', $dataChange); if ($dataModifyFormatada !== $dataChangeFormatada) { $nomefinalpasta = basename($pasta); $dateTimeChange = DateTime::createFromFormat("Y-m-d H:i:s", $dataChangeFormatada); $dataChangeFormatadaLegivel = $dateTimeChange ? $dateTimeChange->format("d-m-Y H:i:s") : $dataChangeFormatada; echo $bold . $vermelho . "[!] Bypass de renomear/substituir na pasta: {$nomefinalpasta}! Confira se o hor\xc3\241rio \303\251 ap\xc3\xb3s a partida, se sim, aplique o W.O!\xa"; echo $bold . $amarelo . "[i] Hor\xc3\241rio do renomeio/substitui\303\247\xc3\xa3o: {$dataChangeFormatadaLegivel}\xa\xa"; } } } } $pastaShaders = "/sdcard/Android/data/com.dts.freefiremax/files/contentcache/Optional/android/gameassetbundles"; $comandoFind = "adb shell find " . escapeshellarg($pastaShaders) . " -name "shaders*" -type f 2>&1"; $arquivosShaders = shell_exec($comandoFind); if (!empty($arquivosShaders)) { $arquivosShaders = explode("  
", trim($arquivosShaders)); foreach ($arquivosShaders as $arquivo) { if (empty($arquivo)) { continue; } $comandoStat = "adb shell stat " . escapeshellarg($arquivo) . " 2>&1"; $resultadoStat = shell_exec($comandoStat); if (strpos($resultadoStat, "File:") !== false) { preg_match("/Modify: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)/", $resultadoStat, $matchModify); preg_match("/Change: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)/", $resultadoStat, $matchChange); if ($matchModify && $matchChange) { $dataModify = trim($matchModify[1]); $dataChange = trim($matchChange[1]); $dataModifyFormatada = preg_replace("/\.\d+.*$/", '', $dataModify); $dataChangeFormatada = preg_replace("/\.\d+.*$/", '', $dataChange); if ($dataModifyFormatada !== $dataChangeFormatada) { $nomeArquivo = basename($arquivo); $dateTimeChange = DateTime::createFromFormat("Y-m-d H:i:s", $dataChangeFormatada); $dataChangeFormatadaLegivel = $dateTimeChange ? $dateTimeChange->format("d-m-Y H:i:s") : $dataChangeFormatada; echo $bold . $vermelho . "[!] Arquivo shader modificado: {$nomeArquivo}  
"; echo $bold . $amarelo . "[i] Hor\303\xa1rio da modifica\303\xa7\xc3\243o: {$dataChangeFormatadaLegivel}\xa"; echo $bold . $vermelho . "[!] Verifique se a data \xc3\xa9 ap\xc3\xb3s a partida, se sim aplique o W.O!  
\xa"; } } } } } else { } $diretorioShaders = "/sdcard/Android/data/com.dts.freefiremax/files/contentcache/Optional/android/gameassetbundles"; $comandoShaders = "adb shell "if [ -d " . escapeshellarg($diretorioShaders) . " ]; then find " . escapeshellarg($diretorioShaders) . " -type f; fi""; $resultadoShaders = shell_exec($comandoShaders); $encontrouBypass = false; $encontrouReplayPassado = false; $arquivoSuspeito = ''; if (!empty($resultadoShaders)) { $arquivos = explode("  
", trim($resultadoShaders)); $arquivos = array_filter($arquivos); foreach ($arquivos as $arquivo) { if (empty($arquivo)) { continue; } $comandoExiste = "adb shell "if [ -f " . escapeshellarg($arquivo) . " ]; then echo 1; fi""; if (empty(shell_exec($comandoExiste))) { continue; } $nomeArquivo = basename($arquivo); $comandoVerificaUnityFS = "adb shell "head -c 20 " . escapeshellarg($arquivo) . " 2>/dev/null""; $resultadoVerificaUnityFS = shell_exec($comandoVerificaUnityFS); if (!is_string($resultadoVerificaUnityFS) || strpos($resultadoVerificaUnityFS, "UnityFS") === false) { continue; } $comandoStat = "adb shell "stat " . escapeshellarg($arquivo) . " 2>/dev/null""; $resultadoStat = shell_exec($comandoStat); if (!empty($resultadoStat) && strpos($resultadoStat, "No such file or directory") === false) { preg_match("/Modify: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})/", $resultadoStat, $matchModify); preg_match("/Change: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})/", $resultadoStat, $matchChange); preg_match("/Access: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})/", $resultadoStat, $matchAccess); if (!empty($matchModify[1]) && !empty($matchChange[1]) && !empty($matchAccess[1])) { $dataModifyOriginal = trim($matchModify[1]); $dateTimeModify = DateTime::createFromFormat("Y-m-d H:i:s", $dataModifyOriginal); $dataModify = $dateTimeModify ? $dateTimeModify->format("d-m-Y H:i:s") : "Formato inv\303\xa1lido"; $cmd = "adb shell dumpsys package com.dts.freefiremax | grep -i firstInstallTime"; $firstInstallTime = shell_exec($cmd); if (preg_match("/firstInstallTime=([\d-]+ \d{2}:\d{2}:\d{2})/", $firstInstallTime, $matches)) { $dataInstalacao = trim($matches[1]); $dateTimeInstalacao = DateTime::createFromFormat("Y-m-d H:i:s", $dataInstalacao); $dataInstalacaoFormatada = $dateTimeInstalacao ? $dateTimeInstalacao->format("d-m-Y H:i:s") : "Formato de data inv\303\241lido."; } else { $dataInstalacaoFormatada = "Data de instala\303\247\xc3\243o n\xc3\xa3o encontrada."; } if ($dataModify === $matchChange[1] && $dataModify === $matchAccess[1]) { if (stripos($nomeArquivo, "shader") !== false) { if ($dataModify !== $dataInstalacao) { echo $bold . $amarelo . "[!] Arquivo shader modificado: " . $nomeArquivo . "\xa"; echo $bold . $amarelo . "[!] Hor\303\241rio da modifica\303\247\xc3\xa3o: " . $dataModify . "\xa"; echo $bold . $amarelo . "[*] Data de instala\xc3\247\xc3\xa3o do Free Fire MAX: " . $dataInstalacaoFormatada . "  
"; echo $bold . $branco . "[#] Por favor, verifique no App Usage a data de instala\xc3\247\xc3\243o do Free Fire e compare com o hor\303\241rio da modifica\xc3\247\303\243o. Se for diferente, aplique o W.O!\xa\xa"; $encontrouReplayPassado = true; $arquivoSuspeito = $nomeArquivo; } break; } } } } } if ($encontrouBypass) { echo $bold . $vermelho . "[!] Modifica\303\xa7\303\xa3o em arquivo de shaders detectada. Arquivo: " . $arquivoSuspeito . ", Aplique o W.O!  
\xa"; } elseif ($encontrouReplayPassado) { echo $bold . $vermelho . "[!] Poss\xc3\255vel modifica\303\247\303\243o em arquivo de shaders detectada. Arquivo: " . $arquivoSuspeito . ", Hor\303\xa1rio: " . $dataModify . "\xa"; echo $bold . $vermelho . "[*] Data de instala\303\xa7\xc3\xa3o do Free Fire: " . $dataInstalacaoFormatada . "  
"; echo $bold . $branco . "[#] Verifique cuidadosamente no App Usage a data de instala\303\247\303\243o do Free Fire!  
\xa"; } else { echo $bold . $fverde . "[i] Nenhuma altera\xc3\247\xc3\243o suspeita encontrada.\xa"; } } else { echo $bold . $vermelho . "[!] Nenhum arquivo shader encontrado ou pasta inexistente.  
"; } $comandoPastaShaders = "adb shell "stat " . escapeshellarg($diretorioShaders) . " 2>/dev/null""; $resultadoPastaShaders = shell_exec($comandoPastaShaders); $encontrouBypassPasta = false; $encontrouReplayPassadoPasta = false; $dataModifyFormatada = ''; $dataChangeFormatada = ''; if (!empty($resultadoPastaShaders)) { preg_match("/Modify: (.*?)\n/", $resultadoPastaShaders, $matchModify); preg_match("/Change: (.*?)\n/", $resultadoPastaShaders, $matchChange); preg_match("/Access: (.*?)\n/", $resultadoPastaShaders, $matchAccess); if (!empty($matchModify[1]) && !empty($matchChange[1]) && !empty($matchAccess[1])) { $dataModify = trim($matchModify[1]); $dataChange = trim($matchChange[1]); $dataAccess = trim($matchAccess[1]); $dataModifyFormatada = preg_replace("/\.\d{9}.*$/", '', $dataModify); $date = DateTime::createFromFormat("Y-m-d H:i:s", $dataModifyFormatada); if ($date) { $dataModifyFormatada = $date->format("d-m-Y H:i:s"); } $dataChangeFormatada = preg_replace("/\.\d{9}.*$/", '', $dataChange); $dateChange = DateTime::createFromFormat("Y-m-d H:i:s", $dataChangeFormatada); if ($dateChange) { $dataChangeFormatada = $dateChange->format("d-m-Y H:i:s"); } if ($dataModify !== $dataChange) { $encontrouBypassPasta = true; } if ($dataModify === $dataChange && $dataModify === $dataAccess) { $encontrouReplayPassadoPasta = true; } } } if ($encontrouBypassPasta || $encontrouReplayPassadoPasta) { echo $bold . $vermelho . "[!] Modifica\303\xa7\303\243o suspeita detectada na pasta shaders! Aplique o W.O!\xa"; echo $bold . $amarelo . "[*] Data da \xc3\272ltima modifica\303\xa7\xc3\243o: " . $dataModifyFormatada . "  
\xa"; } else { echo $bold . $fverde . "[i] Pasta shaders sem altera\xc3\xa7\303\265es suspeitas.\xa"; if (!empty($dataModifyFormatada)) { echo $bold . $amarelo . "[*] Data da \xc3\272ltima modifica\303\247\xc3\xa3o: " . $dataModifyFormatada . "\xa\xa"; } else { echo "  
"; } } echo "  
" . $bold . $amarelo . "[*] Data da \303\272ltima altera\xc3\247\xc3\xa3o na pasta 'gameassetbundles': " . ($dataChangeFormatada ?: "N\303\243o encontrada") . "  
"; echo $bold . $branco . "[#] Verifique o hor\303\xa1rio da \303\272ltima altera\xc3\xa7\303\xa3o, se for ap\303\263s a partida, aplique o W.O!\xa  
"; $diretorioVerificar = "/sdcard/Android/data/com.dts.freefiremax/files/contentcache/Optional/android"; echo "[+] Verificando datas de modifica\xc3\247\303\xa3o na pasta 'android'...\xa"; $comandoStat = "adb shell stat " . escapeshellarg($diretorioVerificar) . " 2>&1"; $resultadoStat = shell_exec($comandoStat); if (strpos($resultadoStat, "File:") !== false) { preg_match("/Access: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)/", $resultadoStat, $matchAccess); preg_match("/Modify: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)/", $resultadoStat, $matchModify); preg_match("/Change: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)/", $resultadoStat, $matchChange); if ($matchAccess && $matchModify && $matchChange) { $dataAccess = $matchAccess[1]; $dataModify = $matchModify[1]; $dataChange = $matchChange[1]; $dateModify = DateTime::createFromFormat("Y-m-d H:i:s.u", $dataModify); if ($dateModify) { $dataModifyFormatada = $dateModify->format("d-m-Y H:i:s"); } if ($dataAccess === $dataModify && $dataModify === $dataChange) { echo $bold . $vermelho . "[!] Poss\xc3\255vel bypass detectado - Datas id\xc3\xaanticas\xa"; echo $bold . $vermelho . "[i] Data: " . $dataModifyFormatada . "  
"; } elseif ($dataModify === $dataChange) { echo $bold . $amarelo . "[i] Modifica\xc3\xa7\xc3\243o da pasta: " . $dataModifyFormatada . "  
"; } else { echo $bold . $vermelho . "[!] Discrep\xc3\xa2ncia encontrada  
"; $dateAccess = DateTime::createFromFormat("Y-m-d H:i:s.u", $dataAccess); $dateChange = DateTime::createFromFormat("Y-m-d H:i:s.u", $dataChange); if ($dateAccess && $dateChange) { echo $bold . $amarelo . "[i] Acesso: " . $dateAccess->format("d-m-Y H:i:s") . "  
"; echo $bold . $amarelo . "[i] Modifica\xc3\xa7\xc3\xa3o: " . $dataModifyFormatada . "\xa"; echo $bold . $amarelo . "[i] Mudan\xc3\247a: " . $dateChange->format("d-m-Y H:i:s") . "\xa"; } } } else { echo $bold . $vermelho . "[!] N\xc3\243o foi poss\303\255vel extrair datas. Resultado:  
"; echo $bold . $amarelo . $resultadoStat . "\xa"; } } elseif (strpos($resultadoStat, "No such file") !== false) { echo $bold . $vermelho . "[!] Pasta n\303\243o encontrada  
"; } elseif (strpos($resultadoStat, "Permission denied") !== false) { echo $bold . $vermelho . "[!] Sem permiss\303\xa3o de acesso  
"; } else { echo $bold . $vermelho . "[!] Erro desconhecido. Resultado:  
"; echo $resultadoStat . "\xa"; } echo $bold . $branco . "[+] Caso a pasta 'android' esteja modificada ap\xc3\263s o fim da partida, aplique o W.O!\xa\xa"; $diretorioAvatarRes = "/sdcard/Android/data/com.dts.freefiremax/files/contentcache/Optional/android/optionalavatarres/gameassetbundles"; $comandoVerificarPasta = "adb shell "test -d " . escapeshellarg($diretorioAvatarRes) . " && echo existe || echo naoexiste""; $resultadoVerificarPasta = trim((string) shell_exec($comandoVerificarPasta)); if ($resultadoVerificarPasta !== "existe") { echo $vermelho . "[*] Modifica\303\xa7\xc3\243o detectada na pasta! Aplique o W.O!  
"; } $comandoDataModify = "adb shell stat -c "%y" " . escapeshellarg($diretorioAvatarRes) . " 2>/dev/null"; $comandoDataChange = "adb shell stat -c "%z" " . escapeshellarg($diretorioAvatarRes) . " 2>/dev/null"; $resultadoDataModify = trim((string) shell_exec($comandoDataModify)); $resultadoDataChange = trim((string) shell_exec($comandoDataChange)); if ($resultadoDataModify !== '' && $resultadoDataChange !== '') { try { $dataModify = new DateTime($resultadoDataModify); $dataChange = new DateTime($resultadoDataChange); if ($dataModify != $dataChange) { echo $bold . $vermelho . "[!] Modifica\303\xa7\xc3\243o detectada na pasta da 'optionalavatarres'! Aplique o W.O!\xa\xa"; } else { echo $bold . $amarelo . "[*] Data de altera\xc3\xa7\303\243o na pasta da 'optionalavatarres': " . $dataChange->format("d-m-Y H:i:s") . "\xa"; echo $bold . $branco . "[*] Se a data de altera\xc3\xa7\xc3\243o da pasta for ap\303\xb3s a partida, aplique W.O!'\xa"; } } catch (Exception $e) { echo $vermelho . "[!] Erro ao verificar datas da pasta: " . $e->getMessage() . "  
"; } } $comandoListarArquivos = "adb shell "find " . escapeshellarg($diretorioAvatarRes) . " -type f 2>/dev/null""; $resultadoArquivos = (string) shell_exec($comandoListarArquivos); $modificacaoDetectada = false; if ($resultadoArquivos !== '') { $arquivos = array_filter(explode("  
", trim($resultadoArquivos)), "strlen"); foreach ($arquivos as $arquivo) { $arquivo = (string) $arquivo; if ($arquivo === '') { continue; } $nomeArquivo = basename($arquivo); $caminhoArquivo = $arquivo; $comandoVerificaUnityFS = "adb shell "head -c 20 " . escapeshellarg($caminhoArquivo) . " 2>/dev/null""; $resultadoVerificaUnityFS = (string) shell_exec($comandoVerificaUnityFS); if ($resultadoVerificaUnityFS === '' || strpos($resultadoVerificaUnityFS, "UnityFS") === false) { continue; } $comandoDataModifyArquivo = "adb shell stat -c "%y" " . escapeshellarg($caminhoArquivo) . " 2>/dev/null"; $comandoDataChangeArquivo = "adb shell stat -c "%z" " . escapeshellarg($caminhoArquivo) . " 2>/dev/null"; $resultadoDataModifyArquivo = trim((string) shell_exec($comandoDataModifyArquivo)); $resultadoDataChangeArquivo = trim((string) shell_exec($comandoDataChangeArquivo)); if ($resultadoDataModifyArquivo !== '' && $resultadoDataChangeArquivo !== '') { try { $dataModifyArquivo = new DateTime($resultadoDataModifyArquivo, new DateTimeZone("UTC")); $dataModifyArquivo->setTimezone(new DateTimeZone("America/Sao_Paulo")); $dataChangeArquivo = new DateTime($resultadoDataChangeArquivo, new DateTimeZone("UTC")); $dataChangeArquivo->setTimezone(new DateTimeZone("America/Sao_Paulo")); if ($dataModifyArquivo != $dataChangeArquivo) { echo $bold . $vermelho . "[!] Modifica\xc3\247\303\243o detectada no arquivo: {$nomeArquivo}! Aplique o W.O!\xa\xa"; $modificacaoDetectada = true; } } catch (Exception $e) { echo $vermelho . "[!] Erro ao verificar datas do arquivo {$nomeArquivo}: " . $e->getMessage() . "  
"; } } } if (!$modificacaoDetectada) { echo $bold . $fverde . "[i] Nenhuma altera\xc3\247\xc3\xa3o suspeita encontrada nos arquivos.\xa\xa"; } } else { echo $vermelho . "[*] Sem itens baixados! Verifique se a data \303\251 ap\303\263s o fim da partida!\xa  
"; } echo $bold . $azul . "[+] Checando OBB...  
"; $diretorioObb = "/sdcard/Android/obb/com.dts.freefiremax"; $comandoObb = "adb shell "ls " . escapeshellarg($diretorioObb) . "/*obb* 2>/dev/null""; $resultadoObb = shell_exec($comandoObb); if (!empty($resultadoObb)) { $arquivosObb = explode("\xa", trim($resultadoObb)); foreach ($arquivosObb as $arquivo) { if (empty($arquivo)) { continue; } $comandoDataChange = "adb shell stat -c "%z" " . escapeshellarg($arquivo) . " 2>/dev/null"; $resultadoDataChange = shell_exec($comandoDataChange); if (!empty($resultadoDataChange)) { $dataChange = new DateTime(trim($resultadoDataChange ?? ''), new DateTimeZone("UTC")); $dataChange->setTimezone(new DateTimeZone("America/Sao_Paulo")); echo $amarelo . "[*] Data de modifica\xc3\xa7\303\xa3o do arquivo OBB: " . $dataChange->format("d-m-Y H:i:s") . "\xa"; } else { echo $vermelho . "[!] N\303\243o foi poss\xc3\xadvel obter a data de modifica\xc3\247\xc3\243o do arquivo OBB.\xa"; } } } else { echo $vermelho . "[*] OBB deletada e/ou inexistente!\xa"; } echo $bold . $branco . "[+] Ap\xc3\xb3s verificar in-game se o usu\303\xa1rio est\303\xa1 de Wallhack, olhando skins de armas e atr\303\241s da parede, verifique os hor\xc3\241rios do Shaders e OBB e compare tamb\303\251m com o hor\xc3\241rio do replay, caso esteja muito diferente as datas, aplique o W.O!  
\xa"; $diretorioIl2cpp = "/sdcard/Android/data/com.dts.freefiremax/files/il2cpp"; $arquivoUnityVer = "{$diretorioIl2cpp}/unity.ver"; $comandoUnityVer = "adb shell stat -c '%z' {$arquivoUnityVer} 2>/dev/null"; $resultadoUnityVer = shell_exec($comandoUnityVer); if (!empty($resultadoUnityVer)) { $dataAlteracaoUnityVer = date("d-m-Y H:i:s", strtotime(trim($resultadoUnityVer ?? ''))); echo $amarelo . "[*] Data de modifica\xc3\xa7\xc3\243o do arquivo unity.ver: " . $dataAlteracaoUnityVer . "\xa"; } else { $comandoPastaIl2cpp = "adb shell stat -c '%z' {$diretorioIl2cpp} 2>/dev/null"; $resultadoPastaIl2cpp = shell_exec($comandoPastaIl2cpp); $dataAlteracaoPastaIl2cpp = date("d-m-Y H:i:s", strtotime(trim($resultadoPastaIl2cpp ?? ''))); echo $bold . $vermelho . "[!] O arquivo 'unity.ver' n\xc3\243o existe. Data de modifica\303\247\303\xa3o da pasta 'il2cpp': " . $dataAlteracaoPastaIl2cpp . "\xa"; } $arquivoApkVer = "{$diretorioIl2cpp}/apk.ver"; $comandoApkVer = "adb shell stat -c '%z' {$arquivoApkVer} 2>/dev/null"; $resultadoApkVer = shell_exec($comandoApkVer); if (!empty($resultadoApkVer)) { $dataAlteracaoApkVer = date("d-m-Y H:i:s", strtotime(trim($resultadoApkVer ?? ''))); echo $amarelo . "[*] Data de modifica\303\xa7\xc3\243o do arquivo apk.ver: " . $dataAlteracaoApkVer . "\xa"; } else { $comandoPastaIl2cpp = "adb shell stat -c '%z' {$diretorioIl2cpp} 2>/dev/null"; $resultadoPastaIl2cpp = shell_exec($comandoPastaIl2cpp); $dataAlteracaoPastaIl2cpp = date("d-m-Y H:i:s", strtotime(trim($resultadoPastaIl2cpp ?? ''))); echo $bold . $vermelho . "[!] O arquivo 'apk.ver' n\303\243o existe. Data de modifica\xc3\247\xc3\243o da pasta 'il2cpp': " . $dataAlteracaoPastaIl2cpp . "  
"; } $diretorioMetadata = "{$diretorioIl2cpp}/Metadata"; $comandoMetadata = "adb shell stat -c '%z' {$diretorioMetadata} 2>/dev/null"; $resultadoMetadata = shell_exec($comandoMetadata); if (!empty($resultadoMetadata)) { $dataAlteracaoMetadata = date("d-m-Y H:i:s", strtotime(trim($resultadoMetadata ?? ''))); echo $amarelo . "[*] Data de modifica\xc3\xa7\303\xa3o da pasta Metadata: " . $dataAlteracaoMetadata . "  
"; } else { $comandoPastaIl2cpp = "adb shell stat -c '%z' {$diretorioIl2cpp} 2>/dev/null"; $resultadoPastaIl2cpp = shell_exec($comandoPastaIl2cpp); $dataAlteracaoPastaIl2cpp = date("d-m-Y H:i:s", strtotime(trim($resultadoPastaIl2cpp ?? ''))); echo $bold . $vermelho . "[!] A pasta 'Metadata' n\xc3\xa3o existe. Data de modifica\xc3\xa7\xc3\xa3o da pasta 'il2cpp': " . $dataAlteracaoPastaIl2cpp . "  
"; } echo $bold . $branco . "[+] Verifique se a data de modifica\xc3\xa7\303\243o da pasta Metadata bate exatamente com a data dos arquivos apk.ver e unity.ver, caso estejam diferentes, aplique o W.O!...\xa\xa"; echo $bold . $branco . "  
"; } echo $bold . $vermelho . "[+] Rastro de auxilío encontrado, aplique o W.O!...\xa\xa"; echo $bold . $vermelho . "  
  
\x9 Obrigado por compactuar por um cen\303\xa1rio limpo de cheats.  
"; echo $bold . $branco . "	                 Com carinho, Keller...  
  
\xa  
\xa\xa\xa\xa  
  
\xa  
\xa  
\xa  
\xa  
"; } elseif ($opcaoscanner == "s" | $opcaoscanner == "S") { echo "\xa  
\x9 Obrigado por compactuar por um cen\xc3\xa1rio limpo de cheats.\xa  
"; die; } } goto CoJEq; iWL2l: $lverdebg = "\x1b[102m"; goto rz5nS; dZZ2f: inputusuario("Escolha uma das op\xc3\247\xc3\xb5es acima"); goto ORqEq; tAzlt: echo $bold . $azul . "  
      +--------------------------------------------------------------+\xa      +                       KellerSS Menu                          +  
      +--------------------------------------------------------------+  
  
      \xa  
"; goto E4k7C; McnlU: $lazulbg = "\33[106m"; goto dC0gz; JTYub: $vermelho = "\33[91m"; goto uxro3; blbX2: $lazul = "\33[36m"; goto Yh_Nr; yLtnj: $lamarelobg = "\33[103m"; goto NGpJi; ABt6A: $azulbg = "\x1b[44m"; goto McnlU; pB4kZ: function inputusuario($message) { global $branco, $bold, $verdebg, $vermelhobg, $azulbg, $cln, $lazul, $fverde; $amarelobg = "\33[100m"; $inputstyle = $cln . $bold . $lazul . "[#] " . $message . ": " . $fverde; echo $inputstyle; } goto ji00O; Prubz: function keller_banner() { echo "\33[37m\xa           KellerSS Android\33[36m Fucking Cheaters\33[91m\33[37m discord.gg/allianceoficial\33[91m  
            \xa                            )       (     (          (     \xa                        ( /(       )\ )  )\ )       )\ )  \xa                        )\()) (   (()/( (()/(  (   (()/(  \xa                        |((_)\  )\   /(_)) /(_)) )\   /(_))   
                        |_ ((_)((_) (_))  (_))  ((_) (_))     
                        | |/ / | __|| |   | |   | __|| _ \    
                        ' <  | _| | |__ | |__ | _| |   /  \xa                        _|\_\ |___||____||____||___||_|_\    
  
  
  
                    \x1b[36m{C} Coded By - KellerSS | Credits for Sheik                                   \xa\x1b[32m  
  \xa"; } goto UMm4B; E4k7C: echo $amarelo . " [0]  Instalar M\xc3\xb3dulos{$branco} (Atualizar e instalar m\xc3\xb3dulos){$fverde}   
 [1]  Escanear FreeFire Normal   
{$fverde} [2]  Escanear FreeFire Max   
 {$vermelho}[S]  Sair \xa  
" . $cln; goto NBtMY; XYEph: keller_banner(); goto r7xdw; ji00O: system("clear"); goto XYEph; CoJEq:  ?>
